---
import type { AudioProps } from "../types/types";
import "../styles/AudioRefresh.css";

const props = Astro.props as AudioProps;
---

<script>
  import type { Occurence, AudioProps } from "../types/types";
  class AudioRefresh extends HTMLElement {
    credits: Element | null;
    current: number = 0;
    occurrences: Occurence[] = [];
    audio: HTMLAudioElement | null = null;
    playButton: Element | null = null;
    component: Element | null = null;

    constructor() {
      super();
      this.style.display = "block";
      const name = this.dataset.message || "error";
      this.component = document.getElementById(name);

      this.playButton =
        this.component?.getElementsByClassName("play").item(0) || null;
      const refreshButton = this.component
        ?.getElementsByClassName("refresh")
        .item(0);
      this.credits =
        this.component
          ?.getElementsByClassName("credits-details-container")
          .item(0) || null;

      this.component?.addEventListener("audioLoaded", () => {
        const props: AudioProps = {
          occurrences: JSON.parse(
            this.component?.attributes.getNamedItem("occurrences")?.value ||
              "[]",
          ) as Occurence[],
          current: 0,
          name,
        };
        this.occurrences = props.occurrences;
        this.current = props.current;
        this.setAudio();
        this.setCredits();
      });

      this.playButton?.addEventListener("click", () => {
        if (this.audio === null) return;

        if (this.audio?.paused) {
          this.audio.play();
          return;
        }
        this.audio.pause();
        this.audio.currentTime = 0;
      });

      refreshButton?.addEventListener("click", () => {
        if (this.audio === null) return;

        const oldSvg = refreshButton
          .getElementsByTagName("svg")[0]
          .getElementsByTagName("path")[0]
          .getAttribute("d");
        refreshButton
          .getElementsByTagName("svg")[0]
          .getElementsByTagName("path")[0]
          .setAttribute(
            "d",
            "M4 12a1 1 0 1 0 2 0a1 1 0 1 0-2 0m7 0a1 1 0 1 0 2 0a1 1 0 1 0-2 0m7 0a1 1 0 1 0 2 0a1 1 0 1 0-2 0",
          );

        setTimeout(() => {
          refreshButton
            .getElementsByTagName("svg")[0]
            .getElementsByTagName("path")[0]
            .setAttribute("d", oldSvg || "");
        }, 200);

        this.current = (this.current + 1) % this.occurrences.length;
        this.setCredits();
        const wasPlaying = !this.audio.paused;
        this.audio.pause();
        this.setAudio();
        if (wasPlaying) {
          this.audio?.play();
        }
      });
    }

    togglePlayButton(isPlaying: boolean): void {
      this.playButton
        ?.getElementsByTagName("svg")[0]
        .getElementsByTagName("path")[0]
        .setAttribute(
          "d",
          isPlaying ? "M14 19V5h4v14zm-8 0V5h4v14z" : "M8 5.14v14l11-7z",
        );
    }

    setCredits(): void {
      if (!this.credits) return;

      this.credits.innerHTML = `Audio recording is courtesy of
        ${this.occurrences[this.current]["__rightsHolder"]}. (Recording #${this.current + 1}
        out of ${this.occurrences.length})`;
    }

    setAudio(): void {
      this.audio = new Audio(this.occurrences[this.current]["__birdsong"]);
      this.audio?.addEventListener("play", () => {
        this.togglePlayButton(true);
      });

      this.audio?.addEventListener("pause", () => {
        this.togglePlayButton(false);
      });
    }
  }

  customElements.define("audio-refresh", AudioRefresh);
</script>

<audio-refresh
  data-message={props.name}
  id={props.name}
  {...props}
  style="display: block; padding: 0; height: inherit;"
>
  <div class="audiowrapper columns is-centered is-multiline is-mobile">
    <div class="play column">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="100%"
        height="100%"
        viewBox="0 0 24 24"
        ><path fill="currentColor" d="M8 5.14v14l11-7z"></path></svg
      >
    </div>
    <div class="refresh column">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        width="100%"
        height="100%"
        ><path
          fill="currentColor"
          d="M12 20q-3.35 0-5.675-2.325T4 12q0-3.35 2.325-5.675T12 4q1.725 0 3.3.712T18 6.75V4h2v7h-7V9h4.2q-.8-1.4-2.187-2.2T12 6Q9.5 6 7.75 7.75T6 12q0 2.5 1.75 4.25T12 18q1.925 0 3.475-1.1T17.65 14h2.1q-.7 2.65-2.85 4.325T12 20"
        ></path></svg
      >
    </div>
    <div class="credits-details-container column is-full"></div>
  </div>
</audio-refresh>
