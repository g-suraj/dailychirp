---
import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";
import Audio from "../components/Audio.astro";
import Loader from "../components/Loader.astro";
import "../styles/global.css";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="favicon.ico" />
    <meta name="generator" content={Astro.generator} />
    <title>Daily Chirp</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css"
    />
    <script
      is:inline
      src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.9.2/dist/confetti.browser.min.js"
    ></script>
    <script>
      import { todaysGuesses } from "../scripts/guess_generator";

      import type { Bird, Guess } from "../types/types";

      const today = new Date().toDateString();
      const loaded = document.querySelector(".loaded");
      const result = document.querySelector(".result");
      const image = document.querySelector(".bird-image");
      const playButton = document.querySelector(".play");
      const refreshButton = document.querySelector(".refresh");
      const buttonsContainer = document.querySelector(".buttons-container");

      const hasGuessed = today in localStorage;

      image?.addEventListener("load", () => {
        document
          .querySelector(".loading")
          ?.setAttribute("style", "display: none");
        loaded?.removeAttribute("style");
      });

      window.addEventListener("load", async () => {
        const data = await fetch(
          "https://suraj.fyi/xeno-canto-processed/pickled_data.json",
        );
        const birds: Bird[] = await data.json();
        const { todaysIndex, guesses: guessIndices } = await todaysGuesses(
          today,
          birds.length,
        );
        const todaysBird = birds[todaysIndex];
        const pictureIndex = todaysIndex ** 2 % todaysBird["_pictures"].length;
        const todaysPicture = todaysBird["_pictures"][pictureIndex];
        let occurenceIndex =
          todaysIndex ** 3 % todaysBird["_occurrences"].length;
        let todaysOccurence = todaysBird["_occurrences"][occurenceIndex];
        let audio: HTMLAudioElement = new Audio(todaysOccurence["__birdsong"]);
        const imageDetails = document.querySelector(".image-details-container");
        if (imageDetails) {
          imageDetails.innerHTML = `Image is courtesy of ${todaysPicture["rightsHolder"]}`;
        }

        const setCredits = function (occurenceIndex: number) {
          const creditsDetailsContainer = document.querySelector(
            ".credits-details-container",
          );

          if (!creditsDetailsContainer) {
            return;
          }

          creditsDetailsContainer.innerHTML = `Audio recording is courtesy of
            ${todaysOccurence["__rightsHolder"]}. (Recording #${occurenceIndex + 1}
            out of ${todaysBird["_occurrences"].length})`;
        };
        setCredits(occurenceIndex);

        image?.setAttribute(
          "src",
          todaysBird["_pictures"].length
            ? todaysPicture["src"]
            : "https://www.stockvault.net/data/2018/09/18/254636/preview16.jpg",
        );
        image?.removeAttribute("hidden");

        refreshButton?.addEventListener("click", () => {
          const newOccurrence = Math.floor(
            Math.random() * todaysBird["_occurrences"].length,
          );
          todaysOccurence = todaysBird["_occurrences"][newOccurrence];
          setCredits(newOccurrence);

          const oldSvg = refreshButton
            .getElementsByTagName("svg")[0]
            .getElementsByTagName("path")[0]
            .getAttribute("d");
          refreshButton
            .getElementsByTagName("svg")[0]
            .getElementsByTagName("path")[0]
            .setAttribute(
              "d",
              "M4 12a1 1 0 1 0 2 0a1 1 0 1 0-2 0m7 0a1 1 0 1 0 2 0a1 1 0 1 0-2 0m7 0a1 1 0 1 0 2 0a1 1 0 1 0-2 0",
            );

          setTimeout(() => {
            refreshButton
              .getElementsByTagName("svg")[0]
              .getElementsByTagName("path")[0]
              .setAttribute("d", oldSvg || "");
          }, 200);

          const wasPlaying = !audio.paused;
          audio.pause();
          audio = new Audio(todaysOccurence["__birdsong"]);
          if (wasPlaying) {
            audio?.play();
          }
        });

        playButton?.addEventListener("click", () => {
          playButton // Ugly thing to toggle between play/pause
            .getElementsByTagName("svg")[0]
            .getElementsByTagName("path")[0]
            .setAttribute(
              "d",
              audio.paused ? "M14 19V5h4v14zm-8 0V5h4v14z" : "M8 5.14v14l11-7z",
            );

          if (audio.paused) {
            audio.play();
            return;
          }

          audio.pause();
          audio.currentTime = 0;
        });

        guessIndices.forEach((guess: number) => {
          const btn = document.createElement("div");
          btn.className = "button-div";
          btn.innerHTML += `
          <button
              class="button guess-button"
              value="${guess}">${birds[guess]["vernacularName"]}
          </button>
        `;
          btn.addEventListener("click", () => {
            const todaysGuess: Guess = {
              todaysIndex: `${todaysIndex}`,
              yourGuess: `${guess}`,
            };
            localStorage.setItem(today, JSON.stringify(todaysGuess));
            refreshState();
            image?.setAttribute("style", "");
          });
          buttonsContainer?.appendChild(btn);
        });

        if (hasGuessed) {
          refreshState();
        }
        image?.setAttribute(
          "style",
          hasGuessed
            ? "image-rendering: pixelated"
            : "filter: blur(20px) grayscale(100%);",
        );

        function refreshState() {
          const userGuess: Guess = JSON.parse(
            localStorage.getItem(today) || "{}",
          );
          const userCorrectGuess =
            userGuess["todaysIndex"] == userGuess["yourGuess"];

          if (userCorrectGuess) {
            (window as any).confetti({
              particleCount: 100,
              spread: 70,
              origin: { y: 0.6 },
            });
          }

          document.querySelectorAll(".guess-button")?.forEach((button) => {
            if (button.getAttribute("value") == userGuess["todaysIndex"]) {
              button.classList.add("is-success");
            } else if (button.getAttribute("value") == userGuess["yourGuess"]) {
              button.classList.add("is-danger");
            }
            button.setAttribute("disabled", "");
          });

          if (result) {
            if (userCorrectGuess) {
              result.innerHTML += "<b>That's right</b>!";
            } else {
              result.innerHTML += "<b>Tough luck!</b>";
            }
            result.innerHTML += `<br>What you hear is a "${birds[todaysIndex]["vernacularName"]}"<br>(<i>${birds[todaysIndex]["scientificName"]}</i>)`;
            result.innerHTML += `<br><a class='styled-link' href='https://www.gbif.org/species/${todaysBird["speciesKey"]}'>Click here</a> for more about this bird.`;
          }
        }
      });
    </script></head
  >

  <body>
    <Header />
    <div class="loading section has-text-centered is-centered">
      <Loader />
    </div>
    <div class="loaded" style="display: none;">
      <div class="columns is-centered is-multiline is-mobile">
        <div class="column is-full has-text-centered">
          <div class="title is-4" style="margin-top: 10px;">
            ðŸŽ¶ Guess the Birdsong ðŸŽ¶
          </div>
        </div>

        <div class="column is-full has-text-centered image-container">
          <img class="bird-image" alt="A bird." hidden />
        </div>

        <div class="column is-full has-text-centered image-details-container">
        </div>
        <div class="column is-full has-text-centered credits-details-container">
        </div>
        <div class="column is-full has-text-centered audio-container">
          <Audio />
        </div>

        <div class="column has-text-centered" style="padding-bottom: 0;">
          <div class="is-centered buttons-container"></div>
        </div>
        <div class="column is-full has-text-centered result"></div>
      </div>
    </div>
    <!-- <Footer /> -->
  </body>
</html>
