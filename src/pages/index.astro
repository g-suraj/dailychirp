---
import { Image } from "astro:assets";
import Header from "../components/Header.astro";

type Occurence = {
  __birdsong: string;
  __license: string;
  __rightsHolder: string;
  sex: string;
  fieldNotes: string;
  gbifID: string;
  level0Name: string;
  level1Name: string;
  level2Name: string;
  speciesKey: string;
};

type Bird = {
  scientificName: string;
  higherClassification: string;
  kingdom: string;
  phylum: string;
  class: string;
  order: string;
  family: string;
  genus: string;
  vernacularName: string;
  _pictures: string[];
  _occurrences: Occurence[];
};

async function stableStringToNumGenerator(
  str: string,
  modulo: number,
): Promise<number> {
  /* Generate stable random numbers which are index into the birds object */
  const msgUint8 = new TextEncoder().encode(str);
  const hashBuffer = await crypto.subtle.digest("SHA-256", msgUint8);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  return hashArray.reduce((prev, curr) => prev * curr) % modulo;
}

async function todaysGuesses(todayDateStr: string, numBirds: number) {
  /* Helper to generate today's guesses in a stable manner */
  const todaysIndex = await stableStringToNumGenerator(todayDateStr, numBirds);
  const option1 = await stableStringToNumGenerator(
    todaysIndex.toString(),
    numBirds,
  );
  const option2 = await stableStringToNumGenerator(
    option1.toString(),
    numBirds,
  );
  const option3 = await stableStringToNumGenerator(
    option2.toString(),
    numBirds,
  );
  const insertionIndex = Math.floor(Math.random() * 4);
  const guesses = [option1, option2, option3];
  guesses.splice(insertionIndex, 0, todaysIndex);
  return { todaysIndex, guesses };
}

// Fetch all birds from DB
const data = await fetch(
  "https://g-suraj.github.io/xeno-canto-processed/pickled_data.json",
);
const birds: Bird[] = await data.json();
const numBirds = birds.length;

const todayDateStr = new Date().toDateString();
const { todaysIndex, guesses } = await todaysGuesses(todayDateStr, numBirds);

const todaysBird = birds[todaysIndex];
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <meta name="generator" content={Astro.generator} />
    <title>Daily Chirp</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css"
    />
  </head>

  <Header />
  <script>
    const today = new Date().toDateString();
    const image = document.querySelector(".bird-image");
    const buttons = document.querySelectorAll(".button");

    window.addEventListener("load", () => {
      const hasGuessed = today in localStorage;
      image?.setAttribute("style", hasGuessed ? "" : "filter: blur(15px)");
      if (hasGuessed) {
        refreshButtons();
      }
    });

    function refreshButtons() {
      const userGuess = localStorage.getItem(today) || "";
      buttons.forEach((button) => {
        if (button.getAttribute("value")?.startsWith("yes")) {
          button.classList.add("is-success");
        }

        if (button.getAttribute("value") === `no|${userGuess}`) {
          button.classList.add("is-danger");
        }
      });
    }

    buttons.forEach((button) => {
      button.addEventListener("click", () => {
        const guess = button.getAttribute("value")?.split("|") || "";
        const userGuess = guess[1];
        localStorage.setItem(today, userGuess);
        refreshButtons();
        image?.setAttribute("style", "");
      });
    });
  </script>

  <body>
    <section class="section">
      <div class="columns is-centered is-multiline is-mobile">
        <div class="column is-full has-text-centered">
          <div class="title is-4">What's the birdsong?</div>
        </div>

        <div class="column is-full has-text-centered">
          <Image
            class="bird-image"
            src={todaysBird["_pictures"][2]}
            alt="A bird."
            width="500"
            inferSize
          />
        </div>

        <div class="column is-narrow has-text-centered">
          <audio
            controls
            style="width: inherit;"
            src={todaysBird["_occurrences"][0]["__birdsong"]}></audio>
        </div>

        <div class="column is-full has-text-centered">
          <div class="buttons is-centered">
            {
              guesses.map((g) => (
                <button
                  class="button guess-button"
                  value={g === todaysIndex ? "yes" : "no" + "|" + g}
                >
                  {birds[g]["vernacularName"]}
                </button>
              ))
            }
          </div>
        </div>
      </div>
    </section>
  </body>


</html>
